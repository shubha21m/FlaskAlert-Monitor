pipeline {
    agent any
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage ("Clean workspace") {
            steps {
                cleanWs()
            }
        }
        stage ("Git checkout") {
            steps {
                git branch: 'master', url: 'https://github.com/shubha21m/FlaskAlert-Monitor.git'
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=FlaskAlert-Monitor \
                    -Dsonar.projectKey=FlaskAlert-Monitor '''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage ("Trivy File Scan") {
            steps {
                //sh "trivy fs . > trivy.txt"
                sh"""
                    trivy fs . --severity CRITICAL,HIGH --format table || true
                    trivy fs --format table -o trivy_fs.html .
                """
            }
        }
        stage ("Build Docker Image") {
            steps {
                sh "docker build -t flaskalert-monitor ."
            }
        }
        stage ("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh "docker tag FlaskAlert-Monitor 19bcs2405/flaskalert-monitor:latest"
                        sh "docker push 19bcs2405/flaskalert-monitor:latest"
                    }
                }
            }
        }
        stage('Docker Scout Image') {
            steps {
                script {
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                       sh 'docker-scout quickview 19bcs2405/flaskalert-monitor:latest'
                       sh 'docker-scout cves 19bcs2405/flaskalert-monitor:latest'
                       sh 'docker-scout recommendations 19bcs2405/flaskalert-monitor:latest'
                   }
                }
            }
        }
        stage ("Deploy to Container") {
            steps {
                sh 'docker run -d --name FlaskAlert-Monitor -p 5100:5100 19bcs2405/flaskalert-monitor:latest'
            }
        }
        stage ("Deploy to Kubernetes") {
            steps {
                sh 'python3 AWS-EKS.py'
            }
        }
    }
}
